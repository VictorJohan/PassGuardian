@inject User user
@inject HttpClient http
@inject IToastService toast
<EditForm Model="Password" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <div class="modal fade show" role="dialog" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable p-0">
            <div class="modal-content h-75 p-2" style="width:100%;">
                <div class="modal-header">
                    <span class="fs-4 fw-bold">@Password.ApplicationName</span>
                    <button type="button" class="btn-close" @onclick="() => Close(false)" data-bs-dismiss="modal" aria-label="Close" />
                </div>
                <div class="modal-body m-0 p-0">

                    <div class="form-group">
                        <label>Application</label>
                        <input class="form-control" @bind="Password.ApplicationName" />
                        <ValidationMessage For="(() => Password.ApplicationName)" />
                    </div>

                    <div class="form-group">
                        <label>User Name</label>
                        <div class="input-group">
                            <input id="rUserName" class="form-control" @bind="Password.UserName" />
                            <div class="input-group-append">
                                <button style="z-index:0" type="button" class="btn btn-secondary ml-1" onclick="copyToClipBoard('rUserName')"><span class="oi oi-clipboard" /></button>
                            </div>
                        </div>
                        <ValidationMessage For="(() => Password.UserName)" />

                        <div class="form-group">
                            <label>Password</label>
                            <div class="input-group">
                                <input id="rPassword" class="form-control" @bind="Password.ApplicationPassword" />
                                <div class="input-group-append">
                                    <button style="z-index:0" type="button" class="btn btn-primary ml-1" @onclick="GeneratePassword"> <span class="oi oi-lock-locked" /></button>
                                    <button style="z-index:0" type="button" class="btn btn-secondary ml-1" onclick="copyToClipBoard('rPassword')"><span class="oi oi-clipboard" /></button>
                                </div>
                            </div>
                            <ValidationMessage For="(() => Password.ApplicationPassword)" />
                        </div>

                        <div class="form-group">
                            <label>Last Change</label>
                            <input class="form-control" @bind="Password.LastChange" readonly />
                        </div>

                    </div>
                    <div class="modal-footer">
                        <div class="align-items-center">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" @onclick="New" class="btn btn-success">Clear</button>
                            <button type="button" @onclick="Delete" class="btn btn-danger">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public Password Password { get; set; }

    PasswordBLL passwordBLL;

    protected override async Task OnInitializedAsync()
    {
        passwordBLL = new PasswordBLL(http);
    }

    private async Task GeneratePassword()
    {
        Password.ApplicationPassword = await passwordBLL.GetPasswordFromServer(user.UserID);
        Password.LastChange = DateTime.Now;
    }

    private void New()
    {
        Password = new();
    }

    private async Task Save()
    {
        Password.UserID = user.UserID;
        if (await passwordBLL.Save(Password))
        {
            New();
        }
    }


    private async Task Delete()
    {
        if(await passwordBLL.Delete(Password))
        {
            New();
        }
    }

    private Task Close(bool refrescar)
    {
        return OnClose.InvokeAsync(refrescar);
    }
}
