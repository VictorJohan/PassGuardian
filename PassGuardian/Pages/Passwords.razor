@page "/password"
@inject User user
@inject HttpClient http;
<div class="form-group">
    <div class="input-group">
        <input type="text" step="any"
               @bind-value:event="onchange" @oninput="OnChange" @bind-value="search" class="form-control" placeholder="Application Name" />
        <div class="input-group-append p-0">
            <i style="margin-top:-1px; margin-bottom:1px; z-index:0" class="btn btn-success oi oi-plus"  @onclick="() => {ShowModalCreate();}"></i>
        </div>
    </div>
</div>

<div class="card">
    <table class="table table-responsive-sm w-100">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Application Name</th>
                <th scope="col">Last Change</th>
                <th scope="col">User Name</th>
                <th scope="col">Password</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in passwordsList)
            {
                <tr>
                    <th scope="row">@(passwordsList.IndexOf(item)+1)</th>
                    <td>@item.ApplicationName</td>
                    <td>@item.LastChange</td>
                    <td>@item.UserName</td>
                    <td>
                        <div class="input-group" style="width:100%">
                            <input id="@item.PasswordID" class="form-control" readonly @bind="item.ApplicationPassword" type="password">
                            <div class="input-group-append">
                                <button style="z-index:0" id="btn+@item.PasswordID" type="button" class="btn btn-danger" onclick="show('@item.PasswordID','btn+@item.PasswordID')"> <span class="iconify" data-icon="oi:eye" /></button>
                                <button style="z-index:0" type="button" class="btn btn-warning ml-1" @onclick="() => {ShowModalModified(item);}"> <span class="oi oi-reload" /></button>
                                <button style="z-index:0" type="button" class="btn btn-secondary ml-1" onclick="copyToClipBoard('@item.PasswordID')"><span class="oi oi-clipboard" /></button>
                            </div>
                        </div>
                    </td>
                </tr>
            }

        </tbody>
    </table>
</div>

@if (Show)
{
    <RPassword Password="@Password" OnClose="Close" />
}

@code {
    List<Password> passwordsList;
    List<Password> passwordsListAux;
    public Password Password { get; set; }
    PasswordBLL passwordBLL;
    public bool Show { get; set; }
    string search = "";

    protected override async Task OnInitializedAsync()
    {
        passwordsList = new();
        passwordsListAux = new();
        passwordBLL = new PasswordBLL(http);

        passwordsListAux = await passwordBLL.GetPasswordsByUser(user.UserID);
        passwordsList = passwordsListAux;

    }

    private void OnChange(ChangeEventArgs args)
    {
        passwordsList = passwordsListAux.FindAll(x => x.ApplicationName.Contains((string)args.Value, StringComparison.CurrentCultureIgnoreCase)).ToList();
    }

    private void ShowModalModified(Password password)
    {
        Password = password;
        Show = true;
    }

    private void ShowModalCreate()
    {
        Password = new();
        Show = true;
    }

    private async Task Close(bool refrescar)
    {

        Show = false;
        passwordsListAux = await passwordBLL.GetPasswordsByUser(user.UserID);
        passwordsList = passwordsListAux;
        StateHasChanged();
    }
}
